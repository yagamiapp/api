// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Global {
  id   Int @id @default(autoincrement())
  ties Int @default(0)
}

model OsuBadge {
  id          Int      @id @default(autoincrement())
  awarded_at  DateTime
  description String
  image_url   String
  url         String
  users       User[]
}

model UserWithOsuBadge {
  user_id  Int
  badge_id Int

  @@id([user_id, badge_id])
}

model UserTitle {
  id          Int      @id @default(autoincrement())
  awarded_at  DateTime
  name        String
  description String
  image_url   String
  url         String
  users       User[]
}

model UserWithUserTitle {
  user_id  Int
  badge_id Int

  @@id([user_id, badge_id])
}

model UsersHostingTournament {
  user_id       Int
  tournament_id Int

  @@id([user_id, tournament_id])
}

model User {
  id             Int    @id
  username       String
  country_code   String
  country_name   String
  cover_url      String
  ranked_score   BigInt
  play_count     Int
  total_score    BigInt
  pp_rank        Int
  level          Int
  level_progress Int
  hit_accuracy   Float
  pp             Float

  osu_token        OsuOauth?
  discord_accounts DiscordAccount[]
  twitch_accounts  TwitchAccount[]
  in_teams         UserInTeam[]
  osu_badges       OsuBadge[]
  titles           UserTitle[]
  host_of          Tournament[]
  sessions         UserSession[]
  invites          TeamInvite[]
}

model DiscordAccount {
  user          User   @relation(fields: [osu_id], references: [id])
  osu_id        Int
  id            String @id
  avatar        String
  discriminator String
  flags         Int
  username      String

  token DiscordOauth?
}

model TwitchAccount {
  user                 User         @relation(fields: [osu_id], references: [id])
  osu_id               Int
  id                   Int          @id
  username             String
  requests_enabled     Boolean      @default(false)
  req_require_live     Boolean      @default(false)
  req_require_category Boolean      @default(false)
  tournaments          Tournament[]

  token TwitchOauth?
}

model OsuOauth {
  user_id       Int      @id
  last_update   DateTime @default(now())
  access_token  String
  expires_in    Int
  refresh_token String
  token_type    String

  user User @relation(fields: [user_id], references: [id])
}

model DiscordOauth {
  user_id       String   @id
  last_update   DateTime @default(now())
  access_token  String
  expires_in    Int
  refresh_token String
  token_type    String
  scope         String

  user DiscordAccount @relation(fields: [user_id], references: [id])
}

model TwitchOauth {
  user_id       Int      @id
  last_update   DateTime @default(now())
  access_token  String
  expires_at    BigInt
  refresh_token String
  token_type    String

  user TwitchAccount @relation(fields: [user_id], references: [id])
}

model UserSession {
  id         String   @id
  user       User     @relation(fields: [osu_id], references: [id])
  osu_id     Int
  created_at DateTime @default(now())
  last_used  DateTime @default(now())
  device     String?
  browser    String?
  os         String?
}

model Guild {
  guild_id               String       @id
  change_nickname        Boolean
  linked_role            String?
  player_role            String?
  match_results_channel  String?
  manager_admin_disabled Boolean      @default(false)
  tournaments            Tournament[]
  active_tournament      Int?
}

model Tournament {
  id                  Int     @id @default(autoincrement())
  acronym             String
  name                String
  color               String
  banner_url          String
  description         String
  icon_url            String
  allow_registrations Boolean
  rounds              Round[]
  guild               Guild?  @relation(fields: [guild_id], references: [guild_id])
  guild_id            String?
  private             Boolean @default(false)
  teams               Team[]

  twitch_account_id Int?
  twitch_channel    TwitchAccount?      @relation(fields: [twitch_account_id], references: [id])
  mod_multipliers   ModMultiplier[]
  hosts             User[]
  settings          TournamentSettings?
}

// A model that holds the tournament's settings required to run a match.
// These settings exist inside it's own model so that a match can
// be run without instantiating a full tournament object.
model TournamentSettings {
  id Int @id @default(autoincrement())

  force_nf    Boolean
  score_mode  Int
  team_mode   Int
  team_size   Int
  x_v_x_mode  Int
  fm_mods     Int     @default(1) // How many mods are required for freemod picks
  double_pick Int     @default(1) // 0: No double picking; 1: Only double picking NM; 2 Double picking allowed
  double_ban  Int     @default(1) // 0: No double banning; 1: Only double banning NM; 2 Double banning allowed

  for_tournament Tournament? @relation(fields: [tournament_id], references: [id])
  tournament_id  Int         @unique
  for_match      Match?      @relation(fields: [match_id], references: [id])
  match_id       Int         @unique
}

model ModMultiplier {
  id            Int        @id @default(autoincrement())
  tournament    Tournament @relation(fields: [tournament_id], references: [id])
  tournament_id Int
  mod_string    String
  match_exactly Boolean    @default(false)
  multiplier    Float
}

model Round {
  id            Int        @id @default(autoincrement())
  acronym       String
  name          String
  is_qualifier  Boolean    @default(false)
  matches       Match[]
  tournament    Tournament @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  tournament_id Int

  mappool_in_rounds MappoolInRound[]
  mappools          Mappool[]
  RoundSettings     RoundSettings?
}

// A model that holds the rounds's settings required to run a match.
// These settings exist inside it's own model so that a match can
// be run without instantiating a full tournament object.
model RoundSettings {
  id Int @id @default(autoincrement())

  bans     Int
  best_of  Int
  protects Int

  for_round Round? @relation(fields: [round_id], references: [id])
  round_id  Int?   @unique
  for_match Match? @relation(fields: [match_id], references: [id])
  match_id  Int?   @unique
}

model MappoolInRound {
  round      Round   @relation(fields: [round_id], references: [id], onDelete: Cascade)
  round_id   Int
  mappool    Mappool @relation(fields: [mappool_id], references: [id], onDelete: Cascade)
  mappool_id Int

  @@id([round_id, mappool_id])
}

model Mappool {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  map_in_pools MapInPool[]
  maps         Map[]
  public       Boolean     @default(false)

  mappools_in_rounds MappoolInRound[]
  rounds             Round[]
  in_matches         MappoolInMatch[]
}

model TeamInvite {
  invitee_user_id Int
  invitee         User @relation(fields: [invitee_user_id], references: [id])
  team_id         Int
  team            Team @relation(fields: [team_id], references: [id], onDelete: Cascade)

  @@id([invitee_user_id, team_id])
}

model MapInPool {
  identifier   String // NM1, NM2 etc.
  mods         String
  data         Map?         @relation(fields: [map_id], references: [id])
  map_id       Int?
  mod_priority Int          @default(0)
  map_order    Int?
  mappool      Mappool      @relation(fields: [mappool_id], references: [id], onDelete: Cascade)
  mappool_id   Int
  in_matches   MapInMatch[]

  @@id([identifier, mappool_id])
}

// New and improved and now based on osu!api v2
// osu!standard only
model Map {
  // Beatmap attributes
  id                  Int    @id
  beatmapset_id       Int
  star_rating         Float //'difficulty_rating'
  status              String
  total_length        Int
  diff_mapper_user_id Int //'user_id'
  difficulty_name     String //'version'
  max_combo           Int

  // BeatmapDifficultyAttributes attributes
  aim_difficulty        Float
  approach_rate         Float
  flashlight_difficulty Float
  overall_difficulty    Float
  slider_factor         Float
  speed_difficulty      Float

  // Mod star rating (only fetched and filled in when needed)
  star_rating_dt Float?
  star_rating_hr Float?
  star_rating_ez Float?
  star_rating_ht Float?

  // BeatmapExtended attributes
  bpm            Float
  count_circles  Int
  count_sliders  Int
  count_spinners Int
  circle_size    Float //'cs', changed it to be consistent with the other attributes
  hp_drain       Float //'drain'
  hit_length     Int //same as drain time (I think??)
  last_updated   DateTime
  url            String

  // Beatmapset attributes
  artist             String
  artist_unicode     String
  cover_url          String //Cover art: 'cover.cover'
  cover_2x_url       String //'cover.cover@2x'
  card_url           String //'cover.card'
  card_2x_url        String //'cover.card@2x'
  list_url           String //'cover.list'
  list_2x_url        String //'cover.list@2x'
  slim_cover_url     String //'cover.slimcover'
  slim_cover_2x_url  String //'cover.slimcover@2x'
  preview_url        String //the song preview
  title              String
  title_unicode      String
  set_mapper_user_id Int //'user_id'

  // BeatmapsetExtended attributes
  available Boolean
  // ^ true if 'availability.download_disabled' is false and 'deleted_at' is null

  // Other
  fetch_time DateTime    @default(now())
  in_pools   MapInPool[]
  mappools   Mappool[]
}

model Team {
  id                   Int                    @id @default(autoincrement())
  name                 String
  icon_url             String
  color                String
  members              UserInTeam[]
  tournament           Tournament             @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  tournament_id        Int
  scrim                Boolean                @default(false)
  timezone             Int? // UTC Offset
  in_matches           TeamInMatch[]
  in_qualifier_matches TeamInQualifierMatch[]
  invited_users        TeamInvite[]
}

model UserInTeam {
  osu_id       Int
  user         User @relation(fields: [osu_id], references: [id])
  team         Team @relation(fields: [team_id], references: [id], onDelete: Cascade)
  team_id      Int
  member_order Int  @default(0)

  @@id([osu_id, team_id])
}

model Match {
  id          Int           @id @default(autoincrement())
  teams       TeamInMatch[]
  start_time  DateTime?
  message_id  String?
  channel_id  String?
  mp_link     String?
  waiting_on  Int? // Index of team in teams array
  round       Round?        @relation(fields: [round_id], references: [id])
  round_id    Int?
  map_history MapInMatch[]
  state       Int

  scrim               Boolean             @default(false)
  tournament_settings TournamentSettings?
  round_settings      RoundSettings?
  mappools            MappoolInMatch[]
}

model TeamInMatch {
  match_id   Int
  team_id    Int
  match      Match        @relation(fields: [match_id], references: [id], onDelete: Cascade)
  team       Team         @relation(fields: [team_id], references: [id], onDelete: Cascade)
  score      Int
  roll       Int?
  pick_order Int?
  ban_order  Int?
  aborts     Int          @default(0)
  faults     Int          @default(0)
  warmed_up  Boolean      @default(false)
  bans       MapInMatch[] @relation("banned")
  wins       MapInMatch[] @relation("won")
  picks      MapInMatch[] @relation("picked")
  protects   MapInMatch[] @relation("protected")
  winner     Boolean?

  @@id([team_id, match_id])
}

model MapInMatch {
  map            MapInPool @relation(fields: [map_identifier, pool_id], references: [identifier, mappool_id], onDelete: Cascade)
  match          Match     @relation(fields: [match_id], references: [id], onDelete: Cascade)
  match_id       Int
  map_identifier String
  pool_id        Int

  protected_by    TeamInMatch? @relation(fields: [match_id, protected_by_id], references: [match_id, team_id], name: "protected")
  protected_by_id Int?

  banned_by    TeamInMatch? @relation(fields: [match_id, banned_by_id], references: [match_id, team_id], name: "banned")
  banned_by_id Int?

  picked_by        TeamInMatch? @relation(fields: [match_id, picked_by_id], references: [match_id, team_id], name: "picked")
  picked_by_id     Int?
  pick_number      Int?
  pick_team_number Int?

  won_by    TeamInMatch? @relation(fields: [match_id, won_by_id], references: [match_id, team_id], name: "won")
  won_by_id Int?

  @@id([map_identifier, match_id])
}

model MappoolInMatch {
  mappool    Mappool @relation(fields: [mappool_id], references: [id])
  match      Match   @relation(fields: [match_id], references: [id])
  mappool_id Int
  match_id   Int

  @@id([mappool_id, match_id])
}

model QualifierMatch {
  id        Int                    @id @default(autoincrement())
  teams     TeamInQualifierMatch[]
  map_index Int                    @default(0)
}

model TeamInQualifierMatch {
  team     Team           @relation(fields: [team_id], references: [id])
  team_id  Int
  match    QualifierMatch @relation(fields: [match_id], references: [id])
  match_id Int

  @@id([team_id, match_id])
}
